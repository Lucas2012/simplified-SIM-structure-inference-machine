## Refer to http://caffe.berkeleyvision.org/installation.html
# Contributions simplifying and improving our build system are welcome!
# cuDNN acceleration switch (uncomment to build with cuDNN).
# USE_CUDNN := 1
# CPU-only switch (uncomment to build without GPU support).
# CPU_ONLY := 1
# To customize your choice of compiler, uncomment and set the following.
# N.B. the default for Linux is g++ and the default for OSX is clang++
CUSTOM_CXX := g++
# CUDA directory contains bin/ and lib/ directories that we need.
CUDA_DIR := /cs/vml2/avahdat/software/cuda-7.0
# On Ubuntu 14.04, if cuda tools are installed via
# "sudo apt-get install nvidia-cuda-toolkit" then use this instead:
# CUDA_DIR := /usr
# CUDA architecture setting: going with all of them.
# For CUDA < 6.0, comment the *_50 lines for compatibility.
CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \
-gencode arch=compute_20,code=sm_21 \
-gencode arch=compute_30,code=sm_30 \
-gencode arch=compute_35,code=sm_35 \
-gencode arch=compute_50,code=sm_50 \
-gencode arch=compute_50,code=compute_50
# BLAS choice:
# atlas for ATLAS (default)
# mkl for MKL
# open for OpenBlas
BLAS := open
# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.
# Leave commented to accept the defaults for your choice of BLAS
# (which should work)!
# BLAS_INCLUDE := /cs/natlang-sw/Linux-x86_64/NL/LINALG/ATLAS/3.9.11/include
# BLAS_LIB := /cs/natlang-sw/Linux-x86_64/NL/LINALG/ATLAS/3.9.11/lib
# This is required only if you will compile the matlab interface.
# MATLAB directory should contain the mex binary in /bin.
MATLAB_DIR := /usr/local-linux/matlab
# MATLAB_DIR := /Applications/MATLAB_R2012b.app
# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
# PYTHON_INCLUDE := /rcg/software/Linux/RHEL/6/x86_64/LANG/PYTHON/2.7.6-SYSTEM/include \
# /cs/natlang-sw/Linux-x86_64/NL/LIB/NUMPY/1.6.2/lib/python2.7/site-packages/numpy/core/include/
# Anaconda Python distribution is quite popular. Include path:
# Verify anaconda location, sometimes it's in root.
ANACONDA_HOME := /cs/vml2/avahdat/software/Anaconda-2.2.0/release
PYTHON_INCLUDE := $(ANACONDA_HOME)/include \
$(ANACONDA_HOME)/include/python2.7 \
$(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include
# We need to be able to find libpythonX.X.so or .dylib.
# PYTHON_LIB := /rcg/software/Linux/RHEL/6/x86_64/LANG/PYTHON/2.7.6-SYSTEM/lib64
PYTHON_LIB := $(ANACONDA_HOME)/lib
# Uncomment to support layers written in Python (will link against Python libs)
WITH_PYTHON_LAYER := 1
# Whatever else you find you need goes here.
# Arash: I put HDF5 before Python so that we used the system's HDF5
INCLUDE_DIRS := /rcg/software/Linux/RHEL/6/x86_64/LIB/HDF5/1.8.12/include $(PYTHON_INCLUDE) /usr/local/include /usr/include/openblas /cs/vml2/avahdat/software/opencv-2.4.10/release/include /cs/vml2/avahdat/software/Boost-1.58/boost_1_58_0 /rcg/software/Linux/RHEL/6/x86_64/LIB/GLOG/0.3.3/include /rcg/software/Linux/RHEL/6/x86_64/LIB/LEVELDB/20150213/include /cs/vml2/avahdat/software/lmdb/openldap-2.4.40/libraries/liblmdb /cs/vml2/avahdat/software/protobuf-2.6.1/release/include /cs/vml2/gza11/share/lemon/install/include /cs/vml2/gza11/share/lemon/install

LIBRARY_DIRS := /rcg/software/Linux/RHEL/6/x86_64/LIB/HDF5/1.8.12/lib $(PYTHON_LIB) /usr/local/lib /usr/lib /cs/vml2/avahdat/software/opencv-2.4.10/release/lib /cs/vml2/avahdat/software/Boost-1.58/boost_1_58_0/stage/lib /rcg/software/Linux/RHEL/6/x86_64/LIB/GLOG/0.3.3/lib /rcg/software/Linux/RHEL/6/x86_64/LIB/LEVELDB/20150213/lib /cs/vml2/avahdat/software/lmdb/openldap-2.4.40/libraries/liblmdb /cs/vml2/avahdat/software/protobuf-2.6.1/release/lib /cs/vml2/gza11/share/lemon/install/lib
# Uncomment to use `pkg-config` to specify OpenCV library paths.
# (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)
# USE_PKG_CONFIG := 1
BUILD_DIR := build
DISTRIBUTE_DIR := distribute
# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171
# DEBUG := 1
# The ID of the GPU that 'make runtest' will use to run unit tests.
TEST_GPUID := 0
# enable pretty build (comment to see full commands)
Q ?= @


