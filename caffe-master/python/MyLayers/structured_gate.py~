import unittest
import tempfile
import os
import numpy

import caffe

class structured_gate(caffe.Layer):
    """A layer that initialize messages for recurrent belief propagation"""

    def setup(self, bottom, top):
        self.nScene = 5
        self.nAction = 7
        self.nPeople = 14
        self.K_ = 0;
        self.bottom_batchsize = 0
        self.slen = 0
        self.alen = 0
        self.tlen_leaf = 0
        self.tlen_mid = 0
        self.sunit = 0
        self.aunit = 0
        self.tunit = 0
        self.message_num_action = self.nPeople+1+2*(self.K_>0)
        self.label_stop = []
        self.top_batchsize = 0
        self.on_edge = True
        self.zero2one = True
    
    def reshape(self, bottom, top):
        # have one input one output, initialize messages for each node in the graphical model       
        bottom_batchsize = bottom[0].data.shape[0]
        edge_num = self.nPeople*(self.nPeople-1)/2
        self.bottom_batchsize = bottom_batchsize/edge_num/2
        top[0].reshape(*bottom[1].data.shape)

    def forward(self, bottom, top):
        bot_input = bottom[0].data.copy()
        edge_num = self.nPeople*(self.nPeople-1)/2
        messages = bottom[1].data.copy()
        label_stop = self.nPeople*numpy.ones([self.bottom_batchsize])
        labels = bottom[2].data
        count = 0
        for i in range(0,self.bottom_batchsize):
            for j in range(0,self.nPeople):
                if labels[i*self.nPeople+j] == 0:
                    label_stop[i] = j
                    break
        self.label_stop = label_stop
        # the paired up inputs should be:
        # [(1,2),(2,1)]   [(1,3),(3,1)]   [(1,4),(4,1)]   [(1,5),(5,1)]   [(1,6),(6,1)]
        # [(2,3),(3,2)]   [(2,4),(4,2)]   [(2,5),(5,2)]   [(2,6),(6,2)]
        # [(3,4),(4,3)]   [(3,5),(5,3)]   [(3,6),(6,3)]
        # [(4,5),(5,4)]   [(4,6),(6,4)]
        # [(5,6),(6,5)]
        # gate design:
        on_edge = self.on_edge
        if on_edge:
            s_gate = numpy.zeros(edge_num*self.bottom_batchsize)
        else:
            s_gate = numpy.zeros([edge_num*self.bottom_batchsize,self.nAction])
        zero2one = self.zero2one
        count = 0
        idx = 0
        for f in range(0,self.bottom_batchsize):
            for i in range(0,self.nPeople):
                for j in range(i+1,self.nPeople):
                    if i >= label_stop[f] or j >= label_stop[f]:
                        if on_edge:
                            s_gate[idx] = 0.0
                        else:
                            s_gate[idx] = numpy.zeros(self.nAction)
                    else:
                        o = bot_input[count] + bot_input[count+1]
                        if zero2one == True:
                            s_gate[idx] = (1+numpy.tanh(o))/2.0
                        else:
                            s_gate[idx] = numpy.tanh(o)
                        print s_gate[idx]
                    count += 2
                    idx += 1
        idx = 0
        for f in range(0,self.bottom_batchsize):
            for i in range(0,self.nPeople):
                for j in range(i+1,self.nPeople):
                    o = s_gate[idx]
                    start_i = 75+i*self.message_num_action*self.nAction + j*self.nAction
                    end_i = 75+i*self.message_num_action*self.nAction + (j+1)*self.nAction
                    start_j= 75+j*self.message_num_action*self.nAction + i*self.nAction
                    end_j = 75+j*self.message_num_action*self.nAction + (i+1)*self.nAction
                    messages[f,start_i:end_i] = numpy.multiply(o,messages[f,start_i:end_i])
                    messages[f,start_j:end_j] = numpy.multiply(o,messages[f,start_j:end_j])
                    idx += 1
        top[0].data[...] = messages

    def backward(self, top, propagate_down, bottom):
        # to be written
        # diffs for : bottom[0] -> paired gates input; bottom[1] -> messages
        # diffs from top: gated_messages
        bot_input = bottom[0].data.copy()
        gates_diff = bottom[0].diff.copy()
        messages = bottom[1].data
        message_diff = bottom[1].diff.copy()
        gated_message_diff = top[0].diff.copy()
        edge_num = self.nPeople*(self.nPeople-1)/2
        

        # gates diff:
        # the paired up inputs should be:
        # [(1,2),(2,1)]   [(1,3),(3,1)]   [(1,4),(4,1)]   [(1,5),(5,1)]   [(1,6),(6,1)]
        # [(2,3),(3,2)]   [(2,4),(4,2)]   [(2,5),(5,2)]   [(2,6),(6,2)]
        # [(3,4),(4,3)]   [(3,5),(5,3)]   [(3,6),(6,3)]
        # [(4,5),(5,4)]   [(4,6),(6,4)]
        # [(5,6),(6,5)]

        # gate design:
        on_edge = self.on_edge
        if on_edge == True:
            s_gate = numpy.zeros(edge_num*self.bottom_batchsize)
        else:
            s_gate = numpy.zeros([edge_num*self.bottom_batchsize,self.nAction])
        # non-linearity design:
        zero2one = self.zero2one
        count = 0
        idx = 0
        #print self.bottom_batchsize
        for f in range(0,self.bottom_batchsize):
            for i in range(0,self.nPeople):
                for j in range(i+1,self.nPeople):
                    if i >= self.label_stop[f] or j >= self.label_stop[f]:
                        if on_edge:
                            s_gate[idx] = 0.0
                        else:
                            o = numpy.zeros(self.nAction)
                            s_gate[idx] = o
                    else:
                        o = bot_input[count] + bot_input[count+1] 
                        if zero2one == True:
                            s_gate[idx] = (1+numpy.tanh(o))/2.0
                        else:
                            s_gate[idx] = numpy.tanh(o)
                    count += 2
                    
                    #print s_gate[idx]
                    #if s_gate[idx].all() != 0:
                    #    print s_gate[idx]
                    idx += 1

        count = 0
        idx = 0
        for f in range(0,self.bottom_batchsize):
            for i in range(0,self.nPeople):
                for j in range(i+1,self.nPeople):
                    if i >= self.label_stop[f] or j >= self.label_stop[f]:
                        gates_diff[count] = 0.0
                        count = count+1
                        gates_diff[count] = 0.0
                        count += 1
                        continue
                    # gate diffs
                    start_i = 75+i*self.message_num_action*self.nAction + j*self.nAction
                    end_i = 75+i*self.message_num_action*self.nAction + (j+1)*self.nAction
                    start_j= 75+j*self.message_num_action*self.nAction + i*self.nAction
                    end_j = 75+j*self.message_num_action*self.nAction + (i+1)*self.nAction 
                    diff_ij = gated_message_diff[f,start_i:end_i]
                    message_ij = messages[f,start_i:end_i]
                    diff_ji = gated_message_diff[f,start_j:end_j]
                    message_ji = messages[f,start_j:end_j]
                    diff_ij = numpy.multiply(diff_ij,message_ij)
                    diff_ji =numpy.multiply(diff_ji,message_ji)
                    tanh_sq = numpy.multiply(s_gate[idx],s_gate[idx])
                    if zero2one:
                        divide = 2.0
                    else:
                        divide = 1.0
                    if on_edge == True:
                        gates_diff[count] = (1-tanh_sq)*numpy.sum(diff_ij)/divide
                    else:
                        gates_diff[count] = numpy.multiply((1-tanh_sq),diff_ij)/divide
                    count += 1
                    if on_edge == True:
                        gates_diff[count] = (1-tanh_sq)*numpy.sum(diff_ji)/divide
                    else:
                        gates_diff[count] = numpy.multiply((1-tanh_sq),diff_ji)/divide
                    count += 1
                    #if gates_diff[count] != 0.0:
                    #    print gates_diff[count]
                    # tms1 message diffs:
                    message_diff[f,start_i:end_i] = numpy.multiply(s_gate[idx],gated_message_diff[f,start_i:end_i])
                    message_diff[f,start_j:end_j] = numpy.multiply(s_gate[idx],gated_message_diff[f,start_j:end_j])
                    idx += 1
        bottom[0].diff[...] = gates_diff
        bottom[1].diff[...] = message_diff
        
        

def python_net_file():
    with tempfile.NamedTemporaryFile(delete=False) as f:
        f.write("""name: 'pythonnet' force_backward: true
        input: 'data' input_shape { dim: 10 dim: 9 dim: 8 }
        layer { type: 'Python' name: 'one' bottom: 'data' top: 'one'
          python_param { module: 'test_python_layer' layer: 'SimpleLayer' } }
        layer { type: 'Python' name: 'two' bottom: 'one' top: 'two'
          python_param { module: 'test_python_layer' layer: 'SimpleLayer' } }
        layer { type: 'Python' name: 'three' bottom: 'two' top: 'three'
          python_param { module: 'test_python_layer' layer: 'SimpleLayer' } }""")
        return f.name

class TestPythonLayer(unittest.TestCase):
    def setUp(self):
        net_file = python_net_file()
        self.net = caffe.Net(net_file, caffe.TRAIN)
        os.remove(net_file)

    def test_forward(self):
        x = 8
        self.net.blobs['data'].data[...] = x
        self.net.forward()
        for y in self.net.blobs['three'].data.flat:
            self.assertEqual(y, 10**3 * x)

    def test_backward(self):
        x = 7
        self.net.blobs['three'].diff[...] = x
        self.net.backward()
        for y in self.net.blobs['data'].diff.flat:
            self.assertEqual(y, 10**3 * x)

    def test_reshape(self):
        s = 4
        self.net.blobs['data'].reshape(s, s, s, s)
        self.net.forward()
        for blob in self.net.blobs.itervalues():
            for d in blob.data.shape:
                self.assertEqual(s, d)
