layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageIn2"
  type: "Python"
  bottom: "concat_all1"
  bottom: "label_action"
  top: "A_A_MessageIn2"
  top: "A_S_MessageIn2"
  top: "S_A_MessageIn2"
  python_param {
    module: "simplified_message_in"
    layer: "simplified_message_in"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_A_Message2"
  type: "InnerProduct"
  bottom: "A_A_MessageIn2"
  top: "A_A_MessageOut2"
  param {
    name: "W_hh_1_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_S_Message2"
  type: "InnerProduct"
  bottom: "A_S_MessageIn2"
  top: "A_S_MessageOut2"
  param {
    name: "W_hh_2_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_S_A_Message2"
  type: "InnerProduct"
  bottom: "S_A_MessageIn2"
  top: "S_A_MessageOut2"
  param {
    name: "W_hh_3_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageOut2"
  type: "Python"
  bottom: "A_A_MessageOut2"
  bottom: "A_S_MessageOut2"
  bottom: "S_A_MessageOut2"
  bottom: "label_action"
  bottom: "concat_all0"
  top: "scene_2"
  top: "action_2"
  python_param {
    module: "simplified_message_out"
    layer: "simplified_message_out"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Scene2"
  type: "InnerProduct"
  bottom: "scene_2"
  top: "scene_out2"
  param {
    name: "W_ho_1_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Action2"
  type: "InnerProduct"
  bottom: "action_2"
  top: "action_out2"
  param {
    name: "W_ho_2_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_message_reshape2"
  type: "Python"
  bottom: "action_out2"
  top: "action_out_reshaped2"
  python_param {
    module: "Message_Reshape1"
    layer: "Message_Reshape1"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_2"
  type: "Softmax"
  bottom: "scene_out2"
  top: "scene_normalized_2"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_2"
  type: "Softmax"
  bottom: "action_out2"
  top: "action_normalized_2"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Data_arrange_layer_filter2"
  type: "Python"
  bottom: "action_normalized_2"
  bottom: "label_action"
  top: "fc9_filtered2"
  python_param {
    module: "Data_arrange"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_concatenation_s_a2"
  type: "Concat"
  bottom: "scene_normalized_2"
  bottom: "fc9_filtered2"
  top: "concat_all2"
  concat_param {
    concat_dim: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_output_python_concat_scene"
  type: "Python"
  bottom: "scene_out1"
  bottom: "scene_out2"
  top: "scene_pred"
  python_param {
    module: "MyConcat"
    layer: "MyConcat"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_output_python_concat_action"
  type: "Python"
  bottom: "action_out_reshaped1"
  bottom: "action_out_reshaped2"
  top: "action_pred"
  python_param {
    module: "MyConcat"
    layer: "MyConcat"
  }
}
