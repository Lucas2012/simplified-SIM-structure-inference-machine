name: "CaffeNet"
force_backward:true
layer {
  name: "data_action"
  type: "HDF5Data"
  top: "fc8_CAD_action"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "/media/storage/zhiweid/cvpr16/data/CollectiveActivityDataset/features/hdf5_inputs/train_action.txt"
    batch_size: 70
  }
}
layer {
  name: "label_action"
  type: "HDF5Data"
  top: "label_action"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "/media/storage/zhiweid/cvpr16/data/CollectiveActivityDataset/features/hdf5_inputs/train_action_label.txt"
    batch_size: 70
  }
}
layer {
  name: "data_action"
  type: "HDF5Data"
  top: "fc8_CAD_action"
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "/media/storage/zhiweid/cvpr16/data/CollectiveActivityDataset/features/hdf5_inputs/val_action.txt"
    batch_size: 70
  }
}
layer {
  name: "label_action"
  type: "HDF5Data"
  top: "label_action"
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "/media/storage/zhiweid/cvpr16/data/CollectiveActivityDataset/features/hdf5_inputs/val_action_label.txt"
    batch_size: 70
  }
}
layer {
  name: "data_frame"
  type: "HDF5Data"
  top: "fc8_CAD_frame_prob"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "/media/storage/zhiweid/cvpr16/data/CollectiveActivityDataset/features/hdf5_inputs/train_frame.txt"
    batch_size: 5
  }
}
layer {
  name: "label_frame"
  type: "HDF5Data"
  top: "label_frame"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "/media/storage/zhiweid/cvpr16/data/CollectiveActivityDataset/features/hdf5_inputs/train_frame_label.txt"
    batch_size: 5
  }
}
layer {
  name: "data_frame"
  type: "HDF5Data"
  top: "fc8_CAD_frame_prob"
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "/media/storage/zhiweid/cvpr16/data/CollectiveActivityDataset/features/hdf5_inputs/val_frame.txt"
    batch_size: 5
  }
}
layer {
  name: "label_frame"
  type: "HDF5Data"
  top: "label_frame"
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "/media/storage/zhiweid/cvpr16/data/CollectiveActivityDataset/features/hdf5_inputs/val_frame_label.txt"
    batch_size: 5
  }
}
################################################### re-arrange data ###############################################
#layer {
#  name: "prob_frame"
#  type: "Softmax"
#  bottom: "fc8_CAD_frame"
#  top: "fc8_CAD_frame_prob"
#}
layer{
  name: "weight_prob_frame"
  type: "EliwiseProduct"
  bottom: "fc8_CAD_frame_prob"
  top: "fc8_CAD_frame_prob_weighted"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "prob_action"
  type: "Softmax"
  bottom: "fc8_CAD_action"
  top: "fc8_CAD_prob"
}
layer{
  name: "weight_prob_action"
  type: "EliwiseProduct"
  #bottom: "fc8_CAD_prob"
  bottom: "fc8_CAD_action"
  top: "fc8_CAD_prob_weighted"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer{
  name: "weight_prob_action2"
  type: "EliwiseProduct"
  bottom: "fc8_CAD_action"
  top: "fc8_CAD_prob_weighted2"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "Data_arrange_layer_filter_weighted"
  type: "Python"
  #bottom: "fc8_CAD_action"
  bottom: "fc8_CAD_prob_weighted"
  bottom: "label_action"
  top: "fc9_filtered_weighted"
  python_param{
    module: "Data_arrange"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "concatenation_s_a_p_weighted"
  type: "Concat"
  bottom: "fc8_CAD_frame_prob_weighted"
  bottom: "fc9_filtered_weighted"
  top: "concat_all_weighted"
  concat_param {
    concat_dim: 1
  }
}
layer {
  name: "Data_arrange_layer_filter"
  type: "Python"
  bottom: "fc8_CAD_action"
  #bottom: "fc8_CAD_prob"
  bottom: "label_action"
  top: "fc9_filtered"
  python_param{
    module: "Data_arrange"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "concatenation_s_a_p"
  type: "Concat"
  bottom: "fc8_CAD_frame_prob"
  bottom: "fc9_filtered"
  top: "concat_all"
  concat_param {
    concat_dim: 1
  }
}
layer {
  name: "Data_arrange_layer_init_message"
  type: "Python"
  bottom: "concat_all"
  bottom: "label_action"
  top: "Initial_Messages"
  python_param{
    module: "Initialize_Message"
    layer: "Initial_Message"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_slice_action_frame_0"
  type: "Slice"
  bottom: "concat_all"
  top: "scene_score_normalized0"
  top: "cur_action_score_normalized_reshaped0"
  slice_param {
    slice_point: 5
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageIn1"
  type: "Python"
  bottom: "Initial_Messages"
  bottom: "label_action"
  top: "S_A_MessageIn1"
  top: "A_S_MessageIn1"
  top: "A_A_MessageIn1"
  python_param {
    module: "Message_In"
    layer: "Message_In"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_S_A_Message1"
  type: "InnerProduct"
  bottom: "S_A_MessageIn1"
  top: "S_A_MessageOut1"
  param {
    name: "W_hh_11"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_S_Message1"
  type: "InnerProduct"
  bottom: "A_S_MessageIn1"
  top: "A_S_MessageOut1"
  param {
    name: "W_hh_21"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_A_Message1"
  type: "InnerProduct"
  bottom: "A_A_MessageIn1"
  top: "A_A_MessageOut1_for_check"
  param {
    name: "W_hh_31"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "checkdiff"
  type: "Python"
  bottom: "A_A_MessageOut1_for_check"
  top: "A_A_MessageOut1"
  python_param {
    module: "check_diff"
    layer: "check_diff"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_SceneM1"
  type: "Softmax"
  bottom: "S_A_MessageOut1"
  top: "S_A_MessageOut_normalized1"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_ActionM1"
  type: "Softmax"
  bottom: "A_S_MessageOut1"
  top: "A_S_MessageOut_normalized1"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_TemporalM1"
  type: "Softmax"
  bottom: "A_A_MessageOut1"
  top: "A_A_MessageOut_normalized1"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageOut1"
  type: "Python"
  bottom: "concat_all"
  bottom: "S_A_MessageOut_normalized1"
  bottom: "A_S_MessageOut_normalized1"
  bottom: "A_A_MessageOut_normalized1"
  bottom: "cur_action_score_normalized_reshaped0"
  bottom: "scene_score_normalized0"
  bottom: "label_action"
  bottom: "concat_all_weighted" # this is for no ensemble
  top: "MessageIn1"
  top: "Message_11"
  top: "Message_21"
  python_param {
    module: "Message_Out"
    layer: "Message_Out"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_scene1"
  type: "InnerProduct"
  bottom: "Message_11"
  top: "scene_score1"
  param {
    name: "W_ho_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_Pred1"
  type: "Softmax"
  bottom: "scene_score1"
  top: "scene_score_normalized1"
  softmax_param {
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_action1"
  type: "InnerProduct"
  bottom: "Message_21"
  top: "cur_action_score1"
  param {
    name: "W_ho_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_Pred1"
  type: "Softmax"
  bottom: "cur_action_score1"
  top: "cur_action_score_normalized1"
  softmax_param {
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_filter1"
  type: "Python"
  bottom: "cur_action_score_normalized1"
  bottom: "label_action"
  top: "cur_action_score_normalized_reshaped1"
  python_param {
    module: "filter_action"
    layer: "filter_action"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_reshape11"
  type: "Python"
  bottom: "cur_action_score1"
  top: "cur_action_score_reshaped1"
  python_param {
    module: "Message_Reshape1"
    layer: "Message_Reshape1"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_checkdiff1"
  type: "Python"
  bottom: "cur_action_score_reshaped1"
  top: "cur_action_score_reshaped_checked1"
  python_param {
    module: "check_diff"
    layer: "check_diff"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_graphical_edge2"
  type: "Python"
  bottom: "concat_all"
  bottom: "MessageIn1"
  bottom: "label_action"
  top: "gate_input2"
  python_param {
    module: "graphical_edge"
    layer: "graphical_edge"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_gate_compute2"
  type: "InnerProduct"
  bottom: "gate_input2"
  top: "gates2"
  param {
    name: "W_gh_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_structured_gate2"
  type: "Python"
  bottom: "gates2"
  bottom: "MessageIn1"
  bottom: "label_action"
  top: "gated_MessageIn1"
  python_param {
    module: "structured_gate"
    layer: "structured_gate"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageIn2"
  type: "Python"
  bottom: "MessageIn1"
  bottom: "label_action"
  bottom: "scene_score_normalized1"
  bottom: "cur_action_score1"
  bottom: "concat_all_weighted"
  bottom: "fc8_CAD_prob_weighted2"
  top: "S_A_MessageIn2"
  top: "A_S_MessageIn2"
  top: "A_A_MessageIn2"
  python_param {
    module: "Message_In"
    layer: "Message_In"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_S_A_Message2"
  type: "InnerProduct"
  bottom: "S_A_MessageIn2"
  top: "S_A_MessageOut2"
  param {
    name: "W_hh_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_S_Message2"
  type: "InnerProduct"
  bottom: "A_S_MessageIn2"
  top: "A_S_MessageOut2"
  param {
    name: "W_hh_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_A_Message2"
  type: "InnerProduct"
  bottom: "A_A_MessageIn2"
  top: "A_A_MessageOut2"
  param {
    name: "W_hh_3"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_SceneM2"
  type: "Softmax"
  bottom: "S_A_MessageOut2"
  top: "S_A_MessageOut_normalized2"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_ActionM2"
  type: "Softmax"
  bottom: "A_S_MessageOut2"
  top: "A_S_MessageOut_normalized2"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_TemporalM2"
  type: "Softmax"
  bottom: "A_A_MessageOut2"
  top: "A_A_MessageOut_normalized2"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageOut2"
  type: "Python"
  bottom: "concat_all"
  bottom: "S_A_MessageOut_normalized2"
  bottom: "A_S_MessageOut_normalized2"
  bottom: "A_A_MessageOut_normalized2"
  bottom: "cur_action_score_normalized_reshaped1"
  bottom: "scene_score_normalized1"
  bottom: "label_action"
  bottom: "concat_all_weighted"
  top: "MessageIn2"
  top: "Message_12"
  top: "Message_22"
  python_param {
    module: "Message_Out"
    layer: "Message_Out"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_scene2"
  type: "InnerProduct"
  bottom: "Message_12"
  top: "scene_score2"
  param {
    name: "W_ho_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_Pred2"
  type: "Softmax"
  bottom: "scene_score2"
  top: "scene_score_normalized2"
  softmax_param {
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_action2"
  type: "InnerProduct"
  bottom: "Message_22"
  top: "cur_action_score2"
  param {
    name: "W_ho_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_Pred2"
  type: "Softmax"
  bottom: "cur_action_score2"
  top: "cur_action_score_normalized2"
  softmax_param {
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_filter2"
  type: "Python"
  bottom: "cur_action_score_normalized2"
  bottom: "label_action"
  top: "cur_action_score_normalized_reshaped2"
  python_param {
    module: "filter_action"
    layer: "filter_action"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_reshape12"
  type: "Python"
  bottom: "cur_action_score2"
  top: "cur_action_score_reshaped2"
  python_param {
    module: "Message_Reshape1"
    layer: "Message_Reshape1"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_checkdiff2"
  type: "Python"
  bottom: "cur_action_score_reshaped2"
  top: "cur_action_score_reshaped_checked2"
  python_param {
    module: "check_diff"
    layer: "check_diff"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_output_python_concat_scene"
  type: "Python"
  bottom: "scene_score1"
  bottom: "scene_score2"
  top: "scene_pred"
  python_param {
    module: "MyConcat"
    layer: "MyConcat"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_output_python_concat_action"
  type: "Python"
  bottom: "cur_action_score_reshaped_checked1"
  bottom: "cur_action_score_reshaped_checked2"
  top: "o_action_forcheck"
  python_param {
    module: "MyConcat"
    layer: "MyConcat"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_checkdiff_o"
  type: "Python"
  bottom: "o_action_forcheck"
  bottom: "o_action_forcheck"
  top: "action_pred"
  python_param {
    module: "check_diff"
    layer: "check_diff"
  }
}
layer {
  name: "Data_arrange_layer_filter_mean"
  type: "Python"
  bottom: "action_pred"
  bottom: "label_action"
  top: "action_pred_clean"
  top: "label_action_clean"
  python_param{
    module: "Data_Arrange_Loss_Action"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "Data_arrange_layer_accu"
  type: "Python"
  bottom: "action_pred_clean"
  bottom: "label_action"
  top: "action_pred_final"
  top: "label_action_accu"
  python_param{
    module: "Data_Arrange_Accuracy_Action"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "scene_accuracy_arrange"
  type: "Python"
  bottom: "scene_pred"
  top: "scene_pred_final"
  python_param{
    module: "Data_Arrange_Accuracy_Scene"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "scene_loss_arrange"
  type: "Python"
  bottom: "scene_pred"
  bottom: "label_frame"
  #bottom: "fc8_CAD_frame"
  top: "scene_pred_all"
  top: "scene_label_all"
  python_param{
    module: "Data_Arrange_Loss_Scene"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "silence_layer"
  type: "Python"
  bottom: "fc8_CAD_prob"
  bottom: "scene_pred_final"
  bottom: "label_frame"
  bottom: "label_action_accu"
  bottom: "scene_pred_all"
  bottom: "action_pred_clean"
  bottom: "action_pred"
  bottom: "action_pred_final"
  bottom: "MessageIn2"
  bottom: "gated_MessageIn1"
  bottom: "scene_score_normalized1"
  bottom: "cur_action_score_normalized_reshaped1"
  bottom: "scene_score_normalized2"
  bottom: "cur_action_score_normalized_reshaped2"
  bottom: "fc8_CAD_prob_weighted2"
  python_param{
    module: "Silence"
    layer: "Silence_Layer"
  }
}
layer {
  name: "loss_scene"
  type: "SoftmaxWithLoss"
  bottom: "scene_pred_all"
  #bottom: "scene_pred_final"
  bottom: "scene_label_all"
  top: "loss_scene"
}
layer {
  name: "accuracy_scene"
  type: "Accuracy"
  bottom: "scene_pred_final"
  #bottom: "fc8_CAD_frame_prob_for_check"
  bottom: "label_frame"
  top: "accuracy_scene"
  include {
    phase: TEST
  }
}
layer {
  name: "loss_action"
  type: "SoftmaxWithLoss"
  bottom: "action_pred_clean"
  bottom: "label_action_clean"
  top: "loss_action"
}
layer {
  name: "accuracy_action"
  type: "Accuracy"
  bottom: "action_pred_final"
  bottom: "label_action_accu"
  top: "accuracy_action"
  include {
    phase: TEST
  }
}
