name: "CaffeNet"
force_backward:true
################################################################## action net ############################################################
layer {
  name: "data_action"
  type: "Data"
  top: "data_action"
  top: "label_action"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: false
    crop_size: 227
    mean_file: "imagenet_mean.binaryproto"
  }
  data_param {
    #source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0419_context/CAD_train_lmdb_0419_context"
    source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0903/CAD_action_train_lmdb_0903"
    batch_size: 70
    backend: LMDB
  }
}
layer {
  name: "data_action"
  type: "Data"
  top: "data_action"
  top: "label_action"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 227
    mean_file: "imagenet_mean.binaryproto"
  }
  data_param {
    #source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0419_context/CAD_val_lmdb_0419_context"
    source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0903/CAD_action_val_lmdb_0903"
    batch_size: 70
    backend: LMDB
  }
}
layer {
  name: "conv1_action"
  type: "Convolution"
  bottom: "data_action"
  top: "conv1_action"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_action"
  type: "ReLU"
  bottom: "conv1_action"
  top: "conv1_action"
}
layer {
  name: "pool1_action"
  type: "Pooling"
  bottom: "conv1_action"
  top: "pool1_action"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1_action"
  type: "LRN"
  bottom: "pool1_action"
  top: "norm1_action"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2_action"
  type: "Convolution"
  bottom: "norm1_action"
  top: "conv2_action"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2_action"
  type: "ReLU"
  bottom: "conv2_action"
  top: "conv2_action"
}
layer {
  name: "pool2_action"
  type: "Pooling"
  bottom: "conv2_action"
  top: "pool2_action"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2_action"
  type: "LRN"
  bottom: "pool2_action"
  top: "norm2_action"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3_action"
  type: "Convolution"
  bottom: "norm2_action"
  top: "conv3_action"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_action"
  type: "ReLU"
  bottom: "conv3_action"
  top: "conv3_action"
}
layer {
  name: "conv4_action"
  type: "Convolution"
  bottom: "conv3_action"
  top: "conv4_action"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4_action"
  type: "ReLU"
  bottom: "conv4_action"
  top: "conv4_action"
}
layer {
  name: "conv5_action"
  type: "Convolution"
  bottom: "conv4_action"
  top: "conv5_action"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5_action"
  type: "ReLU"
  bottom: "conv5_action"
  top: "conv5_action"
}
layer {
  name: "pool5_action"
  type: "Pooling"
  bottom: "conv5_action"
  top: "pool5_action"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6_action"
  type: "InnerProduct"
  bottom: "pool5_action"
  top: "fc6_action"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6_action"
  type: "ReLU"
  bottom: "fc6_action"
  top: "fc6_action"
}
layer {
  name: "drop6_action"
  type: "Dropout"
  bottom: "fc6_action"
  top: "fc6_action"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_action"
  type: "InnerProduct"
  bottom: "fc6_action"
  top: "fc7_action"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7_action"
  type: "ReLU"
  bottom: "fc7_action"
  top: "fc7_action"
}
layer {
  name: "drop7_action"
  type: "Dropout"
  bottom: "fc7_action"
  top: "fc7_action"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8_CAD_action"
  type: "InnerProduct"
  bottom: "fc7_action"
  top: "fc8_CAD_action_unnorm"
  param {
    lr_mult: 0
    decay_mult: 0
  } 
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "prob_action_cad"
  type: "Softmax"
  bottom: "fc8_CAD_action_unnorm"
  top: "fc8_CAD_action"
}

################################################################ pose net ###################################################################################

layer {
  name: "data_pose"
  type: "Data"
  top: "data_pose"
  top: "label_pose"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 227
    mean_file: "imagenet_mean.binaryproto"
  }
  data_param {
    #source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0419_context/CAD_train_lmdb_0419_frame_context"
    source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0903/CAD_frame_train_lmdb_0903"
    batch_size: 70
    backend: LMDB
  }
}
layer {
  name: "data_pose"
  type: "Data"
  top: "data_pose"
  top: "label_pose"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 227
    mean_file: "imagenet_mean.binaryproto"
  }
  data_param {
    #source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0419_context/CAD_val_lmdb_0419_frame_context"
    source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0903/CAD_frame_val_lmdb_0903"
    batch_size: 70
    backend: LMDB
  }
}


layer {
  name: "conv1_pose"
  type: "Convolution"
  bottom: "data_pose"
  top: "conv1_pose"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_pose"
  type: "ReLU"
  bottom: "conv1_pose"
  top: "conv1_pose"
}
layer {
  name: "pool1_pose"
  type: "Pooling"
  bottom: "conv1_pose"
  top: "pool1_pose"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1_pose"
  type: "LRN"
  bottom: "pool1_pose"
  top: "norm1_pose"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2_pose"
  type: "Convolution"
  bottom: "norm1_pose"
  top: "conv2_pose"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2_pose"
  type: "ReLU"
  bottom: "conv2_pose"
  top: "conv2_pose"
}
layer {
  name: "pool2_pose"
  type: "Pooling"
  bottom: "conv2_pose"
  top: "pool2_pose"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2_pose"
  type: "LRN"
  bottom: "pool2_pose"
  top: "norm2_pose"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3_pose"
  type: "Convolution"
  bottom: "norm2_pose"
  top: "conv3_pose"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_pose"
  type: "ReLU"
  bottom: "conv3_pose"
  top: "conv3_pose"
}
layer {
  name: "conv4_pose"
  type: "Convolution"
  bottom: "conv3_pose"
  top: "conv4_pose"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4_pose"
  type: "ReLU"
  bottom: "conv4_pose"
  top: "conv4_pose"
}
layer {
  name: "conv5_pose"
  type: "Convolution"
  bottom: "conv4_pose"
  top: "conv5_pose"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5_pose"
  type: "ReLU"
  bottom: "conv5_pose"
  top: "conv5_pose"
}
layer {
  name: "pool5_pose"
  type: "Pooling"
  bottom: "conv5_pose"
  top: "pool5_pose"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6_pose"
  type: "InnerProduct"
  bottom: "pool5_pose"
  top: "fc6_pose"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6_pose"
  type: "ReLU"
  bottom: "fc6_pose"
  top: "fc6_pose"
}
layer {
  name: "drop6_pose"
  type: "Dropout"
  bottom: "fc6_pose"
  top: "fc6_pose"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_pose"
  type: "InnerProduct"
  bottom: "fc6_pose"
  top: "fc7_pose"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7_pose"
  type: "ReLU"
  bottom: "fc7_pose"
  top: "fc7_pose"
}
layer {
  name: "drop7_pose"
  type: "Dropout"
  bottom: "fc7_pose"
  top: "fc7_pose"
  dropout_param {
    dropout_ratio: 0.4
  }
}
layer {
  name: "fc8_CAD_pose"
  type: "InnerProduct"
  bottom: "fc7_pose"
  top: "fc8_CAD_pose"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 8
    bias_term: true
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}


############################################################### pose net end ##############################################################

############################################################### frame net #################################################################

layer {
  name: "data_frame"
  type: "Data"
  top: "data_frame"
  top: "label_frame"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 227
    mean_file: "imagenet_mean.binaryproto"
  }
  data_param {
    #source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0419_context/CAD_train_lmdb_0419_frame_context"
    source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0903/CAD_frame_train_lmdb_0903"
    batch_size: 5
    backend: LMDB
  }
}
layer {
  name: "data_frame"
  type: "Data"
  top: "data_frame"
  top: "label_frame"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 227
    mean_file: "imagenet_mean.binaryproto"
  }
  data_param {
    #source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0419_context/CAD_val_lmdb_0419_frame_context"
    source: "/cs/vml2/zhiweid/CVPR16_NEW/bp-rnn/experiments/0903/CAD_frame_val_lmdb_0903"
    batch_size: 5
    backend: LMDB
  }
}

layer {
  name: "conv1_frame"
  type: "Convolution"
  bottom: "data_frame"
  top: "conv1_frame"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_frame"
  type: "ReLU"
  bottom: "conv1_frame"
  top: "conv1_frame"
}
layer {
  name: "pool1_frame"
  type: "Pooling"
  bottom: "conv1_frame"
  top: "pool1_frame"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1_frame"
  type: "LRN"
  bottom: "pool1_frame"
  top: "norm1_frame"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2_frame"
  type: "Convolution"
  bottom: "norm1_frame"
  top: "conv2_frame"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2_frame"
  type: "ReLU"
  bottom: "conv2_frame"
  top: "conv2_frame"
}
layer {
  name: "pool2_frame"
  type: "Pooling"
  bottom: "conv2_frame"
  top: "pool2_frame"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2_frame"
  type: "LRN"
  bottom: "pool2_frame"
  top: "norm2_frame"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3_frame"
  type: "Convolution"
  bottom: "norm2_frame"
  top: "conv3_frame"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_frame"
  type: "ReLU"
  bottom: "conv3_frame"
  top: "conv3_frame"
}
layer {
  name: "conv4_frame"
  type: "Convolution"
  bottom: "conv3_frame"
  top: "conv4_frame"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4_frame"
  type: "ReLU"
  bottom: "conv4_frame"
  top: "conv4_frame"
}
layer {
  name: "conv5_frame"
  type: "Convolution"
  bottom: "conv4_frame"
  top: "conv5_frame"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5_frame"
  type: "ReLU"
  bottom: "conv5_frame"
  top: "conv5_frame"
}
layer {
  name: "pool5_frame"
  type: "Pooling"
  bottom: "conv5_frame"
  top: "pool5_frame"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6_frame"
  type: "InnerProduct"
  bottom: "pool5_frame"
  top: "fc6_frame"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6_frame"
  type: "ReLU"
  bottom: "fc6_frame"
  top: "fc6_frame"
}
layer {
  name: "drop6_frame"
  type: "Dropout"
  bottom: "fc6_frame"
  top: "fc6_frame"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_frame"
  type: "InnerProduct"
  bottom: "fc6_frame"
  top: "fc7_frame"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7_frame"
  type: "ReLU"
  bottom: "fc7_frame"
  top: "fc7_frame"
}
layer {
  name: "drop7_frame"
  type: "Dropout"
  bottom: "fc7_frame"
  top: "fc7_frame"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8_CAD_frame"
  type: "InnerProduct"
  bottom: "fc7_frame"
  top: "fc8_CAD_frame"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}

################################################### re-arrange data ###############################################
layer {
  name: "prob_frame"
  type: "Softmax"
  bottom: "fc8_CAD_frame"
  #bottom: "fc8_context"
  #bottom: "sum_frame"
  top: "fc8_CAD_frame_prob"
}
#layer {
#  name: "check_diff"
#  type: "Python"
#  bottom: "fc8_CAD_frame_prob_for_check"
#  bottom: "sum_frame"
#  bottom: "fc8_context"
#  bottom: "fc8_CAD_frame"
#  top: "fc8_CAD_frame_prob"
#  python_param{
#    module: "check_diff"
#    layer: "check_diff"
#  }
#}
layer {
  name: "prob_action"
  type: "Softmax"
  bottom: "fc8_CAD_action"
  top: "fc8_CAD_prob"
}
layer {
  name: "prob_pose"
  type: "Softmax"
  bottom: "fc8_CAD_pose"
  top: "fc8_CAD_pose_prob"
}
layer {
  name: "concatenation_a_p"
  type: "Concat"
  bottom: "fc8_CAD_prob"
  bottom: "fc8_CAD_pose_prob"
  top: "concat_action_pose"
  concat_param {
    concat_dim: 1
  }
}
layer {
  name: "fc9"
  type: "InnerProduct"
  bottom: "concat_action_pose"
  top: "fc9_unnorm"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 40
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "prob_action_pose"
  type: "Softmax"
  bottom: "fc9_unnorm"
  top: "fc9"
}
layer {
  name: "Data_arrange_layer_filter"
  type: "Python"
  bottom: "fc8_CAD_action"
  bottom: "label_action"
  bottom: "fc9"
  top: "fc9_filtered"
  python_param{
    module: "Data_arrange"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "concatenation_s_a_p"
  type: "Concat"
  bottom: "fc8_CAD_frame_prob"
  bottom: "fc9_filtered"
  top: "concat_all0"
  concat_param {
    concat_dim: 1
  }
}
layer {
  name: "Data_arrange_layer_init_message"
  type: "Python"
  bottom: "concat_all0"
  bottom: "label_action"
  top: "Initial_Messages"
  python_param{
    module: "Initialize_Message"
    layer: "Initial_Message"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network"
  type: "BP_RNN"
  bottom: "concat_all0"
  bottom: "Initial_Messages"
  bottom: "label_action"
  #bottom: "fc8_context"
  bottom: "fc8_CAD_frame"
  #bottom: "fc8_CAD_action"
  bottom: "concat_all0"
  top: "action_pred"
  top: "scene_pred"  
  param {
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  bp_recurrent_param {
    num_output: 1000  # doesnt need anymore?
    num_frame: 0
    num_iteration: 1
    num_people:14
    scene_class: 5
    action_class: 7
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "Data_arrange_layer_filter_mean"
  type: "Python"
  bottom: "action_pred"
  bottom: "label_action"
  top: "action_pred_clean"
  top: "label_action_clean"
  python_param{
    module: "Data_Arrange_Loss_Action"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "Data_arrange_layer_accu"
  type: "Python"
  bottom: "action_pred_clean"
  bottom: "label_action"
  top: "action_pred_final"
  top: "label_action_accu"
  python_param{
    module: "Data_Arrange_Accuracy_Action"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "scene_accuracy_arrange"
  type: "Python"
  bottom: "scene_pred"
  top: "scene_pred_final"
  python_param{
    module: "Data_Arrange_Accuracy_Scene"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "scene_loss_arrange"
  type: "Python"
  bottom: "scene_pred"
  bottom: "label_frame"
  bottom: "fc8_CAD_frame"
  top: "scene_pred_all"
  top: "scene_label_all"
  python_param{
    module: "Data_Arrange_Loss_Scene"
    layer: "Data_Arrange_Layer"
  }
}
layer {
  name: "silence_layer"
  type: "Python"
  bottom: "scene_pred_final"
  bottom: "label_frame"
  bottom: "label_action_accu"
  bottom: "scene_pred_all"
  bottom: "action_pred_clean"
  bottom: "action_pred"
  bottom: "action_pred_final"
  python_param{
    module: "Silence"
    layer: "Silence_Layer"
  }
}
layer {
  name: "loss_scene"
  type: "SoftmaxWithLoss"
  bottom: "scene_pred_all"
  #bottom: "scene_pred_final"
  bottom: "scene_label_all"
  top: "loss_scene"
}
layer {
  name: "accuracy_scene"
  type: "Accuracy"
  bottom: "scene_pred_final"
  #bottom: "fc8_CAD_frame_prob_for_check"
  bottom: "label_frame"
  top: "accuracy_scene"
  include {
    phase: TEST
  }
}
layer {
  name: "loss_action"
  type: "SoftmaxWithLoss"
  bottom: "action_pred_clean"
  bottom: "label_action_clean"
  top: "loss_action"
}
layer {
  name: "accuracy_action"
  type: "Accuracy"
  bottom: "action_pred_final"
  bottom: "label_action_accu"
  top: "accuracy_action"
  include {
    phase: TEST
  }
}
layer {
  name: "loss_pose"
  type: "SoftmaxWithLoss"
  bottom: "fc8_CAD_pose"
  bottom: "label_pose"
  top: "loss_pose"
}
layer {
  name: "accuracy_pose"
  type: "Accuracy"
  bottom: "fc8_CAD_pose"
  bottom: "label_pose"
  top: "accuracy_pose"
  include {
    phase: TEST
  }
}
