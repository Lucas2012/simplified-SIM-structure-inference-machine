layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_slice_action_frame_0"
  type: "Slice"
  bottom: "concat_all"
  top: "scene_score_normalized0"
  top: "cur_action_score_normalized_reshaped0"
  slice_param {
    slice_point: 5
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageIn1"
  type: "Python"
  bottom: "Initial_Messages"
  bottom: "label_action"
  top: "S_A_MessageIn1"
  top: "A_S_MessageIn1"
  top: "A_A_MessageIn1"
  python_param {
    module: "Message_In"
    layer: "Message_In"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_S_A_Message1"
  type: "InnerProduct"
  bottom: "S_A_MessageIn1"
  top: "S_A_MessageOut1"
  param {
    name: "W_hh_11"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_S_Message1"
  type: "InnerProduct"
  bottom: "A_S_MessageIn1"
  top: "A_S_MessageOut1"
  param {
    name: "W_hh_21"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_A_Message1"
  type: "InnerProduct"
  bottom: "A_A_MessageIn1"
  top: "A_A_MessageOut1"
  param {
    name: "W_hh_31"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_to_ActionM1"
  type: "Softmax"
  bottom: "S_A_MessageOut1"
  top: "S_A_MessageOut_normalized1"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_to_SceneM1"
  type: "Softmax"
  bottom: "A_S_MessageOut1"
  top: "A_S_MessageOut_normalized1"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_to_ActionM1"
  type: "Softmax"
  bottom: "A_A_MessageOut1"
  top: "A_A_MessageOut_normalized1"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageOut1"
  type: "Python"
  bottom: "concat_all"
  bottom: "S_A_MessageOut_normalized1"
  bottom: "A_S_MessageOut_normalized1"
  bottom: "A_A_MessageOut_normalized1"
  bottom: "cur_action_score_normalized_reshaped0"
  bottom: "scene_score_normalized0"
  bottom: "label_action"
  top: "MessageIn1"
  top: "Message_1_ordered1"
  top: "Message_2_ordered1"
  top: "label_stop_scene1"
  top: "label_stop_action1"
  python_param {
    module: "Message_Out"
    layer: "Message_Out"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Output_Ensemble_Scene1"
  type: "Python"
  bottom: "Message_1_ordered1"
  bottom: "label_stop_scene1"
  top: "Message_11"
  python_param {
    module: "Output_Ensemble_Scene"
    layer: "Output_Ensemble_Scene_Layer"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Output_Ensemble_Action1"
  type: "Python"
  bottom: "Message_2_ordered1"
  bottom: "label_stop_action1"
  top: "Message_21"
  python_param {
    module: "Output_Ensemble_Action"
    layer: "Output_Ensemble_Action_Layer"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_scene1"
  type: "InnerProduct"
  bottom: "Message_11"
  top: "scene_score1"
  param {
    name: "W_ho_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_Pred1"
  type: "Softmax"
  bottom: "scene_score1"
  top: "scene_score_normalized1"
  softmax_param {
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_scene_block_prop1"
  type: "Python"
  bottom: "scene_score_normalized1"
  top: "scene_score_normalized_blocked1"
  python_param {
    module: "block_prop"
    layer: "block_prop"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_weight_scene_prev1"
  type: "EliwiseProduct"
  bottom: "scene_score_normalized_blocked1"
  top: "scene_score_normalized_weighted1"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_action1"
  type: "InnerProduct"
  bottom: "Message_21"
  top: "cur_action_score1"
  param {
    name: "W_ho_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_action_block_prop1"
  type: "Python"
  bottom: "cur_action_score1"
  top: "cur_action_score_blocked1"
  python_param {
    module: "block_prop"
    layer: "block_prop"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_weight_action_prev11"
  type: "EliwiseProduct"
  bottom: "cur_action_score_blocked1"
  top: "cur_action_score_weighted11"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_weight_action_prev21"
  type: "EliwiseProduct"
  bottom: "cur_action_score_blocked1"
  top: "cur_action_score_weighted21"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_Pred1"
  type: "Softmax"
  bottom: "cur_action_score1"
  top: "cur_action_score_normalized1"
  softmax_param {
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_filter1"
  type: "Python"
  bottom: "cur_action_score_normalized1"
  bottom: "label_action"
  top: "cur_action_score_normalized_reshaped1"
  python_param {
    module: "filter_action"
    layer: "filter_action"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_reshape11"
  type: "Python"
  bottom: "cur_action_score1"
  top: "cur_action_score_reshaped1"
  python_param {
    module: "Message_Reshape1"
    layer: "Message_Reshape1"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_checkdiff1"
  type: "Python"
  bottom: "cur_action_score_reshaped1"
  top: "cur_action_score_reshaped_checked1"
  python_param {
    module: "check_diff"
    layer: "check_diff"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_graphical_edge2"
  type: "Python"
  bottom: "concat_all"
  bottom: "MessageIn1"
  bottom: "label_action"
  top: "gate_input2"
  python_param {
    module: "graphical_edge"
    layer: "graphical_edge"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_gate_compute2"
  type: "InnerProduct"
  bottom: "gate_input2"
  top: "gates2"
  param {
    name: "W_gh_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_structured_gate2"
  type: "Python"
  bottom: "gates2"
  bottom: "MessageIn1"
  bottom: "label_action"
  top: "gated_MessageIn1"
  python_param {
    module: "structured_gate"
    layer: "structured_gate"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageIn2"
  type: "Python"
  bottom: "MessageIn1"
  bottom: "label_action"
  bottom: "scene_score_normalized_weighted1"
  bottom: "cur_action_score_weighted11"
  bottom: "cur_action_score_weighted21"
  bottom: "concat_all_weighted"
  bottom: "fc8_CAD_prob_weighted2"
  top: "S_A_MessageIn2"
  top: "A_S_MessageIn2"
  top: "A_A_MessageIn2"
  python_param {
    module: "Message_In"
    layer: "Message_In"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_S_A_Message2"
  type: "InnerProduct"
  bottom: "S_A_MessageIn2"
  top: "S_A_MessageOut2"
  param {
    name: "W_hh_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_S_Message2"
  type: "InnerProduct"
  bottom: "A_S_MessageIn2"
  top: "A_S_MessageOut2"
  param {
    name: "W_hh_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_A_Message2"
  type: "InnerProduct"
  bottom: "A_A_MessageIn2"
  top: "A_A_MessageOut2"
  param {
    name: "W_hh_3"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_to_ActionM2"
  type: "Softmax"
  bottom: "S_A_MessageOut2"
  top: "S_A_MessageOut_normalized2"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_to_SceneM2"
  type: "Softmax"
  bottom: "A_S_MessageOut2"
  top: "A_S_MessageOut_normalized2"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_to_ActionM2"
  type: "Softmax"
  bottom: "A_A_MessageOut2"
  top: "A_A_MessageOut_normalized2"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageOut2"
  type: "Python"
  bottom: "concat_all"
  bottom: "S_A_MessageOut_normalized2"
  bottom: "A_S_MessageOut_normalized2"
  bottom: "A_A_MessageOut_normalized2"
  bottom: "cur_action_score_normalized_reshaped1"
  bottom: "scene_score_normalized1"
  bottom: "label_action"
  top: "MessageIn2"
  top: "Message_1_ordered2"
  top: "Message_2_ordered2"
  top: "label_stop_scene2"
  top: "label_stop_action2"
  python_param {
    module: "Message_Out"
    layer: "Message_Out"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Output_Ensemble_Scene2"
  type: "Python"
  bottom: "Message_1_ordered2"
  bottom: "label_stop_scene2"
  top: "Message_12"
  python_param {
    module: "Output_Ensemble_Scene"
    layer: "Output_Ensemble_Scene_Layer"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Output_Ensemble_Action2"
  type: "Python"
  bottom: "Message_2_ordered2"
  bottom: "label_stop_action2"
  top: "Message_22"
  python_param {
    module: "Output_Ensemble_Action"
    layer: "Output_Ensemble_Action_Layer"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_scene2"
  type: "InnerProduct"
  bottom: "Message_12"
  top: "scene_score2"
  param {
    name: "W_ho_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_Pred2"
  type: "Softmax"
  bottom: "scene_score2"
  top: "scene_score_normalized2"
  softmax_param {
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_scene_block_prop2"
  type: "Python"
  bottom: "scene_score_normalized2"
  top: "scene_score_normalized_blocked2"
  python_param {
    module: "block_prop"
    layer: "block_prop"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_weight_scene_prev2"
  type: "EliwiseProduct"
  bottom: "scene_score_normalized_blocked2"
  top: "scene_score_normalized_weighted2"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_action2"
  type: "InnerProduct"
  bottom: "Message_22"
  top: "cur_action_score2"
  param {
    name: "W_ho_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_action_block_prop2"
  type: "Python"
  bottom: "cur_action_score2"
  top: "cur_action_score_blocked2"
  python_param {
    module: "block_prop"
    layer: "block_prop"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_weight_action_prev12"
  type: "EliwiseProduct"
  bottom: "cur_action_score_blocked2"
  top: "cur_action_score_weighted12"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_weight_action_prev22"
  type: "EliwiseProduct"
  bottom: "cur_action_score_blocked2"
  top: "cur_action_score_weighted22"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_Pred2"
  type: "Softmax"
  bottom: "cur_action_score2"
  top: "cur_action_score_normalized2"
  softmax_param {
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_filter2"
  type: "Python"
  bottom: "cur_action_score_normalized2"
  bottom: "label_action"
  top: "cur_action_score_normalized_reshaped2"
  python_param {
    module: "filter_action"
    layer: "filter_action"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_reshape12"
  type: "Python"
  bottom: "cur_action_score2"
  top: "cur_action_score_reshaped2"
  python_param {
    module: "Message_Reshape1"
    layer: "Message_Reshape1"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_checkdiff2"
  type: "Python"
  bottom: "cur_action_score_reshaped2"
  top: "cur_action_score_reshaped_checked2"
  python_param {
    module: "check_diff"
    layer: "check_diff"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_graphical_edge3"
  type: "Python"
  bottom: "concat_all"
  bottom: "MessageIn2"
  bottom: "label_action"
  top: "gate_input3"
  python_param {
    module: "graphical_edge"
    layer: "graphical_edge"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_gate_compute3"
  type: "InnerProduct"
  bottom: "gate_input3"
  top: "gates3"
  param {
    name: "W_gh_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_structured_gate3"
  type: "Python"
  bottom: "gates3"
  bottom: "MessageIn2"
  bottom: "label_action"
  top: "gated_MessageIn2"
  python_param {
    module: "structured_gate"
    layer: "structured_gate"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageIn3"
  type: "Python"
  bottom: "MessageIn2"
  bottom: "label_action"
  bottom: "scene_score_normalized_weighted2"
  bottom: "cur_action_score_weighted12"
  bottom: "cur_action_score_weighted22"
  bottom: "concat_all_weighted"
  bottom: "fc8_CAD_prob_weighted2"
  top: "S_A_MessageIn3"
  top: "A_S_MessageIn3"
  top: "A_A_MessageIn3"
  python_param {
    module: "Message_In"
    layer: "Message_In"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_S_A_Message3"
  type: "InnerProduct"
  bottom: "S_A_MessageIn3"
  top: "S_A_MessageOut3"
  param {
    name: "W_hh_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_S_Message3"
  type: "InnerProduct"
  bottom: "A_S_MessageIn3"
  top: "A_S_MessageOut3"
  param {
    name: "W_hh_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_A_Message3"
  type: "InnerProduct"
  bottom: "A_A_MessageIn3"
  top: "A_A_MessageOut3"
  param {
    name: "W_hh_3"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_to_ActionM3"
  type: "Softmax"
  bottom: "S_A_MessageOut3"
  top: "S_A_MessageOut_normalized3"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_to_SceneM3"
  type: "Softmax"
  bottom: "A_S_MessageOut3"
  top: "A_S_MessageOut_normalized3"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_to_ActionM3"
  type: "Softmax"
  bottom: "A_A_MessageOut3"
  top: "A_A_MessageOut_normalized3"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageOut3"
  type: "Python"
  bottom: "concat_all"
  bottom: "S_A_MessageOut_normalized3"
  bottom: "A_S_MessageOut_normalized3"
  bottom: "A_A_MessageOut_normalized3"
  bottom: "cur_action_score_normalized_reshaped2"
  bottom: "scene_score_normalized2"
  bottom: "label_action"
  top: "MessageIn3"
  top: "Message_1_ordered3"
  top: "Message_2_ordered3"
  top: "label_stop_scene3"
  top: "label_stop_action3"
  python_param {
    module: "Message_Out"
    layer: "Message_Out"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Output_Ensemble_Scene3"
  type: "Python"
  bottom: "Message_1_ordered3"
  bottom: "label_stop_scene3"
  top: "Message_13"
  python_param {
    module: "Output_Ensemble_Scene"
    layer: "Output_Ensemble_Scene_Layer"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Output_Ensemble_Action3"
  type: "Python"
  bottom: "Message_2_ordered3"
  bottom: "label_stop_action3"
  top: "Message_23"
  python_param {
    module: "Output_Ensemble_Action"
    layer: "Output_Ensemble_Action_Layer"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_scene3"
  type: "InnerProduct"
  bottom: "Message_13"
  top: "scene_score3"
  param {
    name: "W_ho_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_Pred3"
  type: "Softmax"
  bottom: "scene_score3"
  top: "scene_score_normalized3"
  softmax_param {
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_scene_block_prop3"
  type: "Python"
  bottom: "scene_score_normalized3"
  top: "scene_score_normalized_blocked3"
  python_param {
    module: "block_prop"
    layer: "block_prop"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_weight_scene_prev3"
  type: "EliwiseProduct"
  bottom: "scene_score_normalized_blocked3"
  top: "scene_score_normalized_weighted3"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_action3"
  type: "InnerProduct"
  bottom: "Message_23"
  top: "cur_action_score3"
  param {
    name: "W_ho_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_action_block_prop3"
  type: "Python"
  bottom: "cur_action_score3"
  top: "cur_action_score_blocked3"
  python_param {
    module: "block_prop"
    layer: "block_prop"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_weight_action_prev13"
  type: "EliwiseProduct"
  bottom: "cur_action_score_blocked3"
  top: "cur_action_score_weighted13"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_weight_action_prev23"
  type: "EliwiseProduct"
  bottom: "cur_action_score_blocked3"
  top: "cur_action_score_weighted23"
  param {
    lr_mult: 10
    decay_mult: 10
  }
  eliwise_product_param {
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_Pred3"
  type: "Softmax"
  bottom: "cur_action_score3"
  top: "cur_action_score_normalized3"
  softmax_param {
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_filter3"
  type: "Python"
  bottom: "cur_action_score_normalized3"
  bottom: "label_action"
  top: "cur_action_score_normalized_reshaped3"
  python_param {
    module: "filter_action"
    layer: "filter_action"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_reshape13"
  type: "Python"
  bottom: "cur_action_score3"
  top: "cur_action_score_reshaped3"
  python_param {
    module: "Message_Reshape1"
    layer: "Message_Reshape1"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_checkdiff3"
  type: "Python"
  bottom: "cur_action_score_reshaped3"
  top: "cur_action_score_reshaped_checked3"
  python_param {
    module: "check_diff"
    layer: "check_diff"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_graphical_edge4"
  type: "Python"
  bottom: "concat_all"
  bottom: "MessageIn3"
  bottom: "label_action"
  top: "gate_input4"
  python_param {
    module: "graphical_edge"
    layer: "graphical_edge"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_gate_compute4"
  type: "InnerProduct"
  bottom: "gate_input4"
  top: "gates4"
  param {
    name: "W_gh_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_structured_gate4"
  type: "Python"
  bottom: "gates4"
  bottom: "MessageIn3"
  bottom: "label_action"
  top: "gated_MessageIn3"
  python_param {
    module: "structured_gate"
    layer: "structured_gate"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageIn4"
  type: "Python"
  bottom: "MessageIn3"
  bottom: "label_action"
  bottom: "scene_score_normalized_weighted3"
  bottom: "cur_action_score_weighted13"
  bottom: "cur_action_score_weighted23"
  bottom: "concat_all_weighted"
  bottom: "fc8_CAD_prob_weighted2"
  top: "S_A_MessageIn4"
  top: "A_S_MessageIn4"
  top: "A_A_MessageIn4"
  python_param {
    module: "Message_In"
    layer: "Message_In"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_S_A_Message4"
  type: "InnerProduct"
  bottom: "S_A_MessageIn4"
  top: "S_A_MessageOut4"
  param {
    name: "W_hh_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_S_Message4"
  type: "InnerProduct"
  bottom: "A_S_MessageIn4"
  top: "A_S_MessageOut4"
  param {
    name: "W_hh_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_A_A_Message4"
  type: "InnerProduct"
  bottom: "A_A_MessageIn4"
  top: "A_A_MessageOut4"
  param {
    name: "W_hh_3"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_to_ActionM4"
  type: "Softmax"
  bottom: "S_A_MessageOut4"
  top: "S_A_MessageOut_normalized4"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_to_SceneM4"
  type: "Softmax"
  bottom: "A_S_MessageOut4"
  top: "A_S_MessageOut_normalized4"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_to_ActionM4"
  type: "Softmax"
  bottom: "A_A_MessageOut4"
  top: "A_A_MessageOut_normalized4"
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_ArrangeMessageOut4"
  type: "Python"
  bottom: "concat_all"
  bottom: "S_A_MessageOut_normalized4"
  bottom: "A_S_MessageOut_normalized4"
  bottom: "A_A_MessageOut_normalized4"
  bottom: "cur_action_score_normalized_reshaped3"
  bottom: "scene_score_normalized3"
  bottom: "label_action"
  top: "MessageIn4"
  top: "Message_1_ordered4"
  top: "Message_2_ordered4"
  top: "label_stop_scene4"
  top: "label_stop_action4"
  python_param {
    module: "Message_Out"
    layer: "Message_Out"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Output_Ensemble_Scene4"
  type: "Python"
  bottom: "Message_1_ordered4"
  bottom: "label_stop_scene4"
  top: "Message_14"
  python_param {
    module: "Output_Ensemble_Scene"
    layer: "Output_Ensemble_Scene_Layer"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Output_Ensemble_Action4"
  type: "Python"
  bottom: "Message_2_ordered4"
  bottom: "label_stop_action4"
  top: "Message_24"
  python_param {
    module: "Output_Ensemble_Action"
    layer: "Output_Ensemble_Action_Layer"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_scene4"
  type: "InnerProduct"
  bottom: "Message_14"
  top: "scene_score4"
  param {
    name: "W_ho_1"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Scene_Pred4"
  type: "Softmax"
  bottom: "scene_score4"
  top: "scene_score_normalized4"
  softmax_param {
    axis: 1
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_LB_action4"
  type: "InnerProduct"
  bottom: "Message_24"
  top: "cur_action_score4"
  param {
    name: "W_ho_2"
    lr_mult: 10
    decay_mult: 10
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 7
    bias_term: true
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_Normalize_Action_Pred4"
  type: "Softmax"
  bottom: "cur_action_score4"
  top: "cur_action_score_normalized4"
  softmax_param {
    axis: 2
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_filter4"
  type: "Python"
  bottom: "cur_action_score_normalized4"
  bottom: "label_action"
  top: "cur_action_score_normalized_reshaped4"
  python_param {
    module: "filter_action"
    layer: "filter_action"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_reshape14"
  type: "Python"
  bottom: "cur_action_score4"
  top: "cur_action_score_reshaped4"
  python_param {
    module: "Message_Reshape1"
    layer: "Message_Reshape1"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_checkdiff4"
  type: "Python"
  bottom: "cur_action_score_reshaped4"
  top: "cur_action_score_reshaped_checked4"
  python_param {
    module: "check_diff"
    layer: "check_diff"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_output_python_concat_scene"
  type: "Python"
  bottom: "scene_score1"
  bottom: "scene_score2"
  bottom: "scene_score3"
  bottom: "scene_score4"
  top: "scene_pred"
  python_param {
    module: "MyConcat"
    layer: "MyConcat"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_output_python_concat_action"
  type: "Python"
  bottom: "cur_action_score_reshaped_checked1"
  bottom: "cur_action_score_reshaped_checked2"
  bottom: "cur_action_score_reshaped_checked3"
  bottom: "cur_action_score_reshaped_checked4"
  top: "o_action_forcheck"
  python_param {
    module: "MyConcat"
    layer: "MyConcat"
  }
}
layer {
  name: "Belief_Propagation_Recurrent_Neural_Network_python_checkdiff_o"
  type: "Python"
  bottom: "o_action_forcheck"
  bottom: "o_action_forcheck"
  top: "action_pred"
  python_param {
    module: "check_diff"
    layer: "check_diff"
  }
}
